// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package examples

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// Invalid parameter
func IsErrorReasonInvalidParam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_INVALID_PARAM.String() && e.Code == 400
}

// Invalid parameter
func ErrorReasonInvalidParamWithCustomMessage(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_INVALID_PARAM.String(), fmt.Sprintf(format, args...))
}

// Invalid parameter

func ErrorReasonInvalidParam() *errors.Error {
	return errors.New(400, ErrorReason_REASON_INVALID_PARAM.String(), "Invalid parameter")
}

// User unauthorized
func IsErrorReasonUserUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_USER_UNAUTHORIZED.String() && e.Code == 401
}

// User unauthorized
func ErrorReasonUserUnauthorizedWithCustomMessage(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_REASON_USER_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

// User unauthorized

func ErrorReasonUserUnauthorized() *errors.Error {
	return errors.New(401, ErrorReason_REASON_USER_UNAUTHORIZED.String(), "User unauthorized")
}

// User forbidden
func IsErrorReasonUserForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_USER_FORBIDDEN.String() && e.Code == 403
}

// User forbidden
func ErrorReasonUserForbiddenWithCustomMessage(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_REASON_USER_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

// User forbidden

func ErrorReasonUserForbidden() *errors.Error {
	return errors.New(403, ErrorReason_REASON_USER_FORBIDDEN.String(), "User forbidden")
}

// 409 Business error: xxx status conflict
func IsErrorReasonStatusConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_STATUS_CONFLICT.String() && e.Code == 409
}

// 409 Business error: xxx status conflict
func ErrorReasonStatusConflictWithCustomMessage(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_REASON_STATUS_CONFLICT.String(), fmt.Sprintf(format, args...))
}

// 409 Business error: xxx status conflict

func ErrorReasonStatusConflict(args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_REASON_STATUS_CONFLICT.String(), fmt.Sprintf("%d status conflict", args...))
}
