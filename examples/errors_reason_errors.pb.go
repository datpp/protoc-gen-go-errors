// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package examples

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 参数错误
func IsErrorReasonInvalidParam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_INVALID_PARAM.String() && e.Code == 400
}

// 参数错误
func ErrorErrorReasonInvalidParam(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERROR_REASON_INVALID_PARAM.String(), fmt.Sprintf(format, args...))
}

// 参数错误
func ErrorMessageErrorReasonInvalidParam() *errors.Error {
	return errors.New(400, ErrorReason_ERROR_REASON_INVALID_PARAM.String(), "参数错误")
}

// 用户未授权
func IsErrorReasonUserUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_USER_UNAUTHORIZED.String() && e.Code == 401
}

// 用户未授权
func ErrorErrorReasonUserUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_ERROR_REASON_USER_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

// 用户未授权
func ErrorMessageErrorReasonUserUnauthorized() *errors.Error {
	return errors.New(401, ErrorReason_ERROR_REASON_USER_UNAUTHORIZED.String(), "用户未授权")
}

// 用户无权限
func IsErrorReasonUserForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_USER_FORBIDDEN.String() && e.Code == 403
}

// 用户无权限
func ErrorErrorReasonUserForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ERROR_REASON_USER_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

// 用户无权限
func ErrorMessageErrorReasonUserForbidden() *errors.Error {
	return errors.New(403, ErrorReason_ERROR_REASON_USER_FORBIDDEN.String(), "用户无权限")
}

// 409 业务错误：xxx状态冲突
func IsErrorReasonStatusConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_STATUS_CONFLICT.String() && e.Code == 409
}

// 409 业务错误：xxx状态冲突
func ErrorErrorReasonStatusConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ERROR_REASON_STATUS_CONFLICT.String(), fmt.Sprintf(format, args...))
}

// 409 业务错误：xxx状态冲突
func ErrorMessageErrorReasonStatusConflict() *errors.Error {
	return errors.New(409, ErrorReason_ERROR_REASON_STATUS_CONFLICT.String(), "xxx状态冲突")
}
